WITH high_risk_diabetes_2023 AS (
    SELECT DISTINCT MembershipNumber AS member_id
    FROM hive_metastore.off_orig.enhanced_member_features
    WHERE has_diabetes_proc = 1
        AND plan_type = 'PPO'
        AND claim_amt_2023 >= (
            SELECT PERCENTILE_APPROX(claim_amt_2023, 0.95)
            FROM hive_metastore.off_orig.enhanced_member_features
            WHERE plan_type = 'PPO'
        )
        AND first_claim_date BETWEEN '2023-01-01' AND '2023-12-31'
),
glucose_tests_2023_24 AS (
    SELECT c.MembershipNumber AS member_id, c.PROC_DT AS test_date
    FROM hive_metastore.off_orig.claims_member c
    INNER JOIN high_risk_diabetes_2023 dm ON c.MembershipNumber = dm.member_id
    WHERE c.PROC_CD IN ('83036', '82947')
        AND c.PROC_DT BETWEEN '2023-01-01' AND '2024-12-31'
),
latest_test AS (
    SELECT member_id, MAX(test_date) AS last_test
    FROM glucose_tests_2023_24
    GROUP BY member_id
),
skip_group AS (
    SELECT dm.member_id,
           CASE WHEN lt.last_test IS NULL OR lt.last_test < '2024-01-01' THEN 1 ELSE 0 END AS skip_flag
    FROM high_risk_diabetes_2023 dm
    LEFT JOIN latest_test lt ON dm.member_id = lt.member_id
    WHERE CASE WHEN lt.last_test IS NULL OR lt.last_test < '2024-01-01' THEN 1 ELSE 0 END = 1
),
not_skip_group AS (
    SELECT dm.member_id,
           CASE WHEN lt.last_test >= '2024-01-01' THEN 1 ELSE 0 END AS skip_flag
    FROM high_risk_diabetes_2023 dm
    LEFT JOIN latest_test lt ON dm.member_id = lt.member_id
    WHERE CASE WHEN lt.last_test >= '2024-01-01' THEN 1 ELSE 0 END = 1
),
hospital_claims_2025 AS (
    SELECT c.MembershipNumber AS member_id,
           c.PROC_DT AS visit_date,
           c.GL_AMT AS line_cost,
           ROW_NUMBER() OVER (PARTITION BY c.MembershipNumber, c.PROC_DT ORDER BY c.PROC_CD) AS rn,
           CASE WHEN c.PROC_CD LIKE '99291%' THEN 'ICU' ELSE 'Hospital' END AS type
    FROM hive_metastore.off_orig.claims_member c
    WHERE c.PLSRV_CD LIKE '%21%'
        AND c.PROC_DT BETWEEN '2025-01-01' AND '2025-10-18'
),
hospital_visits_2025 AS (
    SELECT member_id,
           visit_date,
           MAX(CASE WHEN type = 'ICU' THEN line_cost ELSE 0 END) AS icu_cost,
           MAX(CASE WHEN type = 'Hospital' THEN line_cost ELSE 0 END) AS hospital_cost,
           MAX(CASE WHEN type = 'ICU' THEN 1 ELSE 0 END) AS is_icu
    FROM hospital_claims_2025
    GROUP BY member_id, visit_date
),
skip_hospital AS (
    SELECT 'Skip Test 2023' AS group_name,
           COUNT(DISTINCT hv.member_id) AS num_people,
           COUNT(*) AS num_visits,
           SUM(hv.icu_cost + hv.hospital_cost) AS total_cost,
           SUM(hv.icu_cost) AS total_icu_cost,
           COUNT(CASE WHEN hv.is_icu = 1 THEN 1 END) AS num_icu
    FROM hospital_visits_2025 hv
    INNER JOIN skip_group sg ON hv.member_id = sg.member_id
),
not_skip_hospital AS (
    SELECT 'Not Skip Test 2023' AS group_name,
           COUNT(DISTINCT hv.member_id) AS num_people,
           COUNT(*) AS num_visits,
           SUM(hv.icu_cost + hv.hospital_cost) AS total_cost,
           SUM(hv.icu_cost) AS total_icu_cost,
           COUNT(CASE WHEN hv.is_icu = 1 THEN 1 END) AS num_icu
    FROM hospital_claims_2025 hc
    INNER JOIN not_skip_group sg ON hc.member_id = sg.member_id
    INNER JOIN hospital_visits_2025 hv ON hv.member_id = hc.member_id AND hv.visit_date = hc.visit_date
),
groups_combined AS (
    SELECT * FROM skip_hospital
    UNION ALL
    SELECT * FROM not_skip_hospital
),
risk_projection AS (
    SELECT 
        s.num_icu * (1668.0 / sg.skip_count) AS projected_skip_icu_count,
        s.total_icu_cost * (1668.0 / sg.skip_count) AS projected_skip_icu_cost,
        s.num_visits * (1668.0 / sg.skip_count) AS projected_skip_visits,
        s.total_cost * (1668.0 / sg.skip_count) AS projected_skip_total_cost
    FROM skip_hospital s
    CROSS JOIN (
        SELECT COUNT(*) AS skip_count FROM skip_group
    ) sg
)
SELECT group_name, num_people, num_visits, total_cost, total_icu_cost, num_icu
FROM groups_combined
UNION ALL
SELECT 'Projected: All 1668 Skip' AS group_name,
       NULL AS num_people,
       projected_skip_visits,
       projected_skip_total_cost,
       projected_skip_icu_cost,
       projected_skip_icu_count
FROM risk_projection;
