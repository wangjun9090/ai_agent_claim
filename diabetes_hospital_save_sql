WITH high_risk_diabetes_2023 AS (
    -- Identify high-risk diabetes patients from 2023 based on top 5% claim costs
    SELECT DISTINCT MembershipNumber AS member_id
    FROM hive_metastore.off_orig.enhanced_member_features
    WHERE has_diabetes_proc = 1
        AND plan_type = 'PPO'
        AND claim_amt_2023 >= (
            SELECT PERCENTILE_APPROX(claim_amt_2023, 0.95)
            FROM hive_metastore.off_orig.enhanced_member_features
            WHERE plan_type = 'PPO'
        )
        AND first_claim_date >= '2023-01-01'
        AND first_claim_date < '2024-01-01'
),

glucose_tests_2024_2025 AS (
    -- Capture glucose tests only from 2024 to 2025
    SELECT c.MembershipNumber AS member_id, c.PROC_DT AS test_date
    FROM hive_metastore.off_orig.claims_member c
    INNER JOIN high_risk_diabetes_2023 dm ON c.MembershipNumber = dm.member_id
    WHERE c.PROC_CD IN ('83036', '82947')
        AND c.PROC_DT BETWEEN '2024-01-01' AND '2025-10-18'
),

has_any_test_2024_2025 AS (
    -- Identify members with at least one glucose test in 2024-2025
    SELECT member_id
    FROM glucose_tests_2024_2025
    GROUP BY member_id
),

true_skip_group AS (
    -- Define skip group: high-risk members with no glucose tests in 2024-2025
    SELECT dm.member_id
    FROM high_risk_diabetes_2023 dm
    LEFT JOIN has_any_test_2024_2025 t ON dm.member_id = t.member_id
    WHERE t.member_id IS NULL
),

hospital_claims_2023_2025 AS (
    -- Collect all hospital claims (PLSRV_CD LIKE '%21%') from 2023 to 2025
    SELECT c.MembershipNumber AS member_id,
           c.PROC_DT AS visit_date,
           CASE WHEN c.PROC_CD LIKE '99291%' THEN 'ICU' ELSE 'Hospital' END AS type
    FROM hive_metastore.off_orig.claims_member c
    WHERE c.PLSRV_CD LIKE '%21%'
        AND c.PROC_DT BETWEEN '2023-01-01' AND '2025-10-18'
),

all_visits_2023_2025 AS (
    -- Aggregate total visits (ICU + Hospital) and define is_icu
    SELECT member_id,
           visit_date,
           MAX(CASE WHEN type = 'ICU' THEN 1 ELSE 0 END) AS is_icu
    FROM hospital_claims_2023_2025
    GROUP BY member_id, visit_date
),

skip_hospital AS (
    -- Statistics for the true skip group
    SELECT 'True Skip 2024-2025' AS group_name,
           COUNT(DISTINCT av.member_id) AS num_people,
           COUNT(*) AS num_visits,
           CAST(COUNT(CASE WHEN av.is_icu = 1 THEN 1 END) AS INTEGER) AS num_icu,
           CAST(COUNT(CASE WHEN av.is_icu = 0 THEN 1 END) AS INTEGER) AS num_hospital
    FROM all_visits_2023_2025 av
    INNER JOIN true_skip_group sg ON av.member_id = sg.member_id
),

not_skip_hospital AS (
    -- Statistics for the non-skip group (those with at least one test in 2024-2025)
    SELECT 'Not Skip 2024-2025' AS group_name,
           COUNT(DISTINCT av.member_id) AS num_people,
           COUNT(*) AS num_visits,
           CAST(COUNT(CASE WHEN av.is_icu = 1 THEN 1 END) AS INTEGER) AS num_icu,
           CAST(COUNT(CASE WHEN av.is_icu = 0 THEN 1 END) AS INTEGER) AS num_hospital
    FROM all_visits_2023_2025 av
    INNER JOIN high_risk_diabetes_2023 hs ON av.member_id = hs.member_id
    INNER JOIN has_any_test_2024_2025 t ON av.member_id = t.member_id
),

groups_combined AS (
    SELECT * FROM skip_hospital
    UNION ALL
    SELECT * FROM not_skip_hospital
),

risk_projection AS (
    -- Project visits for all 1668 skipping testing
    SELECT 
        s.num_icu * (1668.0 / sg.skip_count) AS projected_skip_icu_count,
        s.num_hospital * (1668.0 / sg.skip_count) AS projected_skip_hospital_count,
        s.num_visits * (1668.0 / sg.skip_count) AS projected_skip_visits
    FROM skip_hospital s
    CROSS JOIN (
        SELECT COUNT(*) AS skip_count FROM true_skip_group
    ) sg
)

SELECT group_name,
       num_people,
       num_visits,
       num_icu,
       num_hospital
FROM groups_combined
UNION ALL
SELECT 'Projected: All 1668 Skip' AS group_name,
       NULL AS num_people,
       CAST(projected_skip_visits AS INTEGER) AS num_visits,
       CAST(projected_skip_icu_count AS INTEGER) AS num_icu,
       CAST(projected_skip_hospital_count AS INTEGER) AS num_hospital
FROM risk_projection;
